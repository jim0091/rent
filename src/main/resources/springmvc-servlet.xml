<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:p="http://www.springframework.org/schema/p" xmlns:c="http://www.springframework.org/schema/c"
	   xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd"
	   default-autowire="default">

	<context:property-placeholder location="classpath:properties/app.properties, classpath:properties/app-${deploy.env}.properties"
								  ignore-resource-not-found="true" ignore-unresolvable="true" />

	<mvc:default-servlet-handler />
	<context:annotation-config />
	<context:component-scan base-package="com.jinhui.*" />


	<!--swagger config start,访问地址 http://localhost:port/swagger-ui.html-->
	<mvc:resources mapping="/dist/*.html" location="/dist/"/>
	<mvc:resources mapping="/dist/**" location="/dist/"/>
	<mvc:resources mapping="/**/*.json" location="/dist/"/>

	<bean name="springfox" class="com.jinhui.swagger.SwaggerConfig"/>
	<!--swagger config stop-->


	<mvc:cors>
		<mvc:mapping path="/**"
					 allowed-methods="GET, POST, OPTIONS"/>
	</mvc:cors>

<!-- 	<mvc:annotation-driven /> -->

	<mvc:annotation-driven>
		<mvc:path-matching suffix-pattern="false" />
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter" />
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
	</bean>
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 开启事务控制的注解支持 -->
	<!--<tx:annotation-driven transaction-manager="transactionManager"/>-->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="sqlSessionFactory" name="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="mapperLocations">
			<list>
				<value>classpath:com/jinhui/mapper/**/**/*Mapper.xml</value>
			</list>
		</property>
		<property name="configLocation">
			<value>classpath:mybatis-config.xml</value>
		</property>
		<property name="databaseIdProvider">
			<bean class="org.apache.ibatis.mapping.VendorDatabaseIdProvider" />
		</property>
	</bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jinhui.mapper" />
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate" />
	</bean>

	<mvc:resources mapping="/**" location="/WEB-INF/" />
     
      <!-- 拦截器 -->
	<mvc:interceptors>
		<!-- 多个拦截器，顺序执行 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<!--拦截的url -->
			<!--<mvc:mapping path="/admin/**"/>-->
			<!-- 不拦截的url -->
			<mvc:exclude-mapping path="/rent/signIn"/>
			<mvc:exclude-mapping path="/rent/wechatSignIn"/>
			<mvc:exclude-mapping path="/rent/refreshSession"/>
			<mvc:exclude-mapping path="/rent/openid"/>
			<!--不拦截的url -->
			<bean class="com.jinhui.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
        
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${redis.pool.minEvictableIdleTimeMillis}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
		<property name="maxTotal" value="${redis.pool.maxTotal}" />
		<property name="testWhileIdle" value="${redis.pool.testWhileIdle}" />
	</bean>
	<bean id="redisSentinelConfig" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
		<constructor-arg name="propertySource" >
			<bean class="org.springframework.core.env.MapPropertySource">
				<constructor-arg name="name" value="sentinelConfig" />
				<constructor-arg name="source">
					<map>
						<entry key="spring.redis.sentinel.master" value="${redis.master.name}" />
						<entry key="spring.redis.sentinel.nodes" value="${redis.sentinel.nodes}" />
					</map>
				</constructor-arg>
			</bean>
		</constructor-arg>
	</bean>
	<bean id="jedisConnectionFactory"
		  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<constructor-arg name="sentinelConfig" ref="redisSentinelConfig" />
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" />
		<property name="password" value="${redis.password}" />
	</bean>

	<bean id="redisStringTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory" />

	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory">
		<property name="KeySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
		</property>
	</bean>

	<bean id="springContextHolder" class="com.jinhui.util.SpringContextHolder"
		lazy-init="false" />

	<bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<property name="maxUploadSizePerFile" value="10240000" />
	</bean>

	<bean id="fabricShellClient" class="com.jinhui.util.FabricShellClient">
		<property name="cmdDir" value="${fabric.client.cmd.path}" />
	</bean>
</beans>